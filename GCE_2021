
def individual(df_raw, alpha): 
 # 2021_trust_GCE

  # pip install pandas 
  # pip install numpy
  # import pandas as pd 
  # import numpy as np ã€€
  # import matplotlib.pyplot as plt
  # df_raw = pd.read_csv("csv_name")

# variavble name
  RESP = "FaceAndTarget.RESP"
  Validity = "validity"
  SOA = "SOA"
  ACC = "FaceAndTarget.ACC"
  RT = "FaceAndTarget.RT"
  
  ACClist = []
  RTlist = []

# sorting
  conditions = {"condition1" : ["valid", "iihito", 450], "condition2": ["valid", "iihito", 1000], "condition3": ["valid", "waruihito", 450], "condition4" : ["valid", "waruihito", 1000], "condition5" : ["valid", "darasinai", 450], "condition6":["valid", "darasinai", 1000] , "condition7" : ["invalid", "iihito", 450], "condition8": ["invalid", "iihito", 1000], "condition9": ["invalid", "waruihito", 450], "condition10" : ["invalid", "waruihito", 1000], "condition11" : ["invalid", "darasinai", 450], "condition12":["invalid", "darasinai", 1000] }
  for condition in conditions.values():
    df = df_raw[(df_raw[Validity] == condition[0]) & (df_raw["hito"] == condition[1]) & (df_raw[SOA] == condition[2] ) ]

# basic statistical info
    describe_df = df.describe()
    #print(describe_df)
# count the number of no-response trials and calculate its percentage
    no_res_df = df[df[RESP].isnull()]
    print(no_res_df)
    no_res_count = no_res_df.count()
    print(no_res_count)

# ACC
    df_w_res = df[(df[RESP] == "f") | (df[RESP] == "j")]
    acc = df_w_res[ACC].mean()
    print("ACC=", acc)

# Outlier removal
    stdvs = df_w_res[RT].std()
    mean = df_w_res[RT].mean()
    print("SD=", stdvs)
    print("M=", mean)
    df_outlier = df_w_res[(df_w_res[RT] < mean-alpha*stdvs) | (df_w_res[RT] > mean+alpha*stdvs) | (df_w_res[RT] < 100)]
    #print(df_outlier)
    df_wo_outlier = df_w_res[(df_w_res[RT] >= mean-alpha*stdvs) & (df_w_res[RT] <= mean+alpha*stdvs) & (df_w_res[RT] > 100)]
    df2 = df_wo_outlier
    #print(df2)

# Correct Response only
    df_correct = df2[df[ACC] == 1]
    #print(df_correct)

# RT
    rt = df2[RT].mean()
    print("RT=", rt)
  
#Append list   
    ACClist.append(acc)
    RTlist.append(rt) 
  
  print(ACClist)
  print(RTlist)

# Bar grapth
"""
  fig = plt.figure()
  left = np.array([1, 6])
  height_ACC = ACClist
  label = list(conditions.keys())
  c1 = "#1E7F00"
  c2 = "#444444"
  color = [c1, c2, c1, c2, c2, c2]
  ax1 = fig.add_subplot(2, 1, 1)
  ax1.bar(left, height_ACC, tick_label = label, color = color, align = "center")  
  ax1.set_title("ACC")

  height_RT = RTlist
  ax2 = fig.add_subplot(2, 1, 2)
  ax2.bar(left, height_RT, tick_label = label, align = "center")
  ax2.set_title("RT")
  
  plt.tight_layout
  plt.show()
  """
